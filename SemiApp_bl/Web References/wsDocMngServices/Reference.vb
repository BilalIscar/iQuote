'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace wsDocMngServices
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="wsDocMngServicesSoap", [Namespace]:="http://Iscar.CloudServices/")>  _
    Partial Public Class wsDocMngServices
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private validationSoapHeaderValueField As ValidationSoapHeader
        
        Private MoveFLD_OBJECTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Upload_DocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Download_DocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetiQuote_PendingQuotationsListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsObjectExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wsVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SemiApp_bl.My.MySettings.Default.SemiApp_bl_wsDocMngServices_wsDocMngServices
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property ValidationSoapHeaderValue() As ValidationSoapHeader
            Get
                Return Me.validationSoapHeaderValueField
            End Get
            Set
                Me.validationSoapHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event MoveFLD_OBJECTCompleted As MoveFLD_OBJECTCompletedEventHandler
        
        '''<remarks/>
        Public Event Upload_DocumentCompleted As Upload_DocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListObjectCompleted As GetListObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event Download_DocumentCompleted As Download_DocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetiQuote_PendingQuotationsListCompleted As GetiQuote_PendingQuotationsListCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFileCompleted As DeleteFileCompletedEventHandler
        
        '''<remarks/>
        Public Event IsObjectExistCompleted As IsObjectExistCompletedEventHandler
        
        '''<remarks/>
        Public Event wsVersionCompleted As wsVersionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/MoveFLD_OBJECT", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MoveFLD_OBJECT(ByVal sSourceSubject As String, ByVal sSourceObject As String, ByVal sTargetSubject As String, ByVal sTargetObject As String, ByVal FileOwner As String, ByVal branchCode As String, ByVal AdditionaData As String) As String
            Dim results() As Object = Me.Invoke("MoveFLD_OBJECT", New Object() {sSourceSubject, sSourceObject, sTargetSubject, sTargetObject, FileOwner, branchCode, AdditionaData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MoveFLD_OBJECTAsync(ByVal sSourceSubject As String, ByVal sSourceObject As String, ByVal sTargetSubject As String, ByVal sTargetObject As String, ByVal FileOwner As String, ByVal branchCode As String, ByVal AdditionaData As String)
            Me.MoveFLD_OBJECTAsync(sSourceSubject, sSourceObject, sTargetSubject, sTargetObject, FileOwner, branchCode, AdditionaData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MoveFLD_OBJECTAsync(ByVal sSourceSubject As String, ByVal sSourceObject As String, ByVal sTargetSubject As String, ByVal sTargetObject As String, ByVal FileOwner As String, ByVal branchCode As String, ByVal AdditionaData As String, ByVal userState As Object)
            If (Me.MoveFLD_OBJECTOperationCompleted Is Nothing) Then
                Me.MoveFLD_OBJECTOperationCompleted = AddressOf Me.OnMoveFLD_OBJECTOperationCompleted
            End If
            Me.InvokeAsync("MoveFLD_OBJECT", New Object() {sSourceSubject, sSourceObject, sTargetSubject, sTargetObject, FileOwner, branchCode, AdditionaData}, Me.MoveFLD_OBJECTOperationCompleted, userState)
        End Sub
        
        Private Sub OnMoveFLD_OBJECTOperationCompleted(ByVal arg As Object)
            If (Not (Me.MoveFLD_OBJECTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MoveFLD_OBJECTCompleted(Me, New MoveFLD_OBJECTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/Upload_Document", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Upload_Document(ByVal branchCode As String, ByVal Subject As String, ByVal FolderPath As String, ByVal FileName As String, ByVal FileOwner As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal File() As Byte, ByVal Overwrite As Boolean) As String
            Dim results() As Object = Me.Invoke("Upload_Document", New Object() {branchCode, Subject, FolderPath, FileName, FileOwner, File, Overwrite})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Upload_DocumentAsync(ByVal branchCode As String, ByVal Subject As String, ByVal FolderPath As String, ByVal FileName As String, ByVal FileOwner As String, ByVal File() As Byte, ByVal Overwrite As Boolean)
            Me.Upload_DocumentAsync(branchCode, Subject, FolderPath, FileName, FileOwner, File, Overwrite, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Upload_DocumentAsync(ByVal branchCode As String, ByVal Subject As String, ByVal FolderPath As String, ByVal FileName As String, ByVal FileOwner As String, ByVal File() As Byte, ByVal Overwrite As Boolean, ByVal userState As Object)
            If (Me.Upload_DocumentOperationCompleted Is Nothing) Then
                Me.Upload_DocumentOperationCompleted = AddressOf Me.OnUpload_DocumentOperationCompleted
            End If
            Me.InvokeAsync("Upload_Document", New Object() {branchCode, Subject, FolderPath, FileName, FileOwner, File, Overwrite}, Me.Upload_DocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpload_DocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.Upload_DocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Upload_DocumentCompleted(Me, New Upload_DocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/GetListObject", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListObject(ByVal FolderArr As String, ByVal sSubject As String, ByVal branchCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetListObject", New Object() {FolderArr, sSubject, branchCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListObjectAsync(ByVal FolderArr As String, ByVal sSubject As String, ByVal branchCode As String)
            Me.GetListObjectAsync(FolderArr, sSubject, branchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListObjectAsync(ByVal FolderArr As String, ByVal sSubject As String, ByVal branchCode As String, ByVal userState As Object)
            If (Me.GetListObjectOperationCompleted Is Nothing) Then
                Me.GetListObjectOperationCompleted = AddressOf Me.OnGetListObjectOperationCompleted
            End If
            Me.InvokeAsync("GetListObject", New Object() {FolderArr, sSubject, branchCode}, Me.GetListObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListObjectCompleted(Me, New GetListObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/Download_Document", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Download_Document(ByVal FolderArr As String, ByVal sSubject As String, ByVal branchCode As String, ByVal FileName As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Download_Document", New Object() {FolderArr, sSubject, branchCode, FileName})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Download_DocumentAsync(ByVal FolderArr As String, ByVal sSubject As String, ByVal branchCode As String, ByVal FileName As String)
            Me.Download_DocumentAsync(FolderArr, sSubject, branchCode, FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Download_DocumentAsync(ByVal FolderArr As String, ByVal sSubject As String, ByVal branchCode As String, ByVal FileName As String, ByVal userState As Object)
            If (Me.Download_DocumentOperationCompleted Is Nothing) Then
                Me.Download_DocumentOperationCompleted = AddressOf Me.OnDownload_DocumentOperationCompleted
            End If
            Me.InvokeAsync("Download_Document", New Object() {FolderArr, sSubject, branchCode, FileName}, Me.Download_DocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownload_DocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.Download_DocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Download_DocumentCompleted(Me, New Download_DocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/GetiQuote_PendingQuotationsList", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetiQuote_PendingQuotationsList(ByVal Enviroment As String, ByVal RequestApp As String, ByVal branchCode As String) As Boolean
            Dim results() As Object = Me.Invoke("GetiQuote_PendingQuotationsList", New Object() {Enviroment, RequestApp, branchCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetiQuote_PendingQuotationsListAsync(ByVal Enviroment As String, ByVal RequestApp As String, ByVal branchCode As String)
            Me.GetiQuote_PendingQuotationsListAsync(Enviroment, RequestApp, branchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetiQuote_PendingQuotationsListAsync(ByVal Enviroment As String, ByVal RequestApp As String, ByVal branchCode As String, ByVal userState As Object)
            If (Me.GetiQuote_PendingQuotationsListOperationCompleted Is Nothing) Then
                Me.GetiQuote_PendingQuotationsListOperationCompleted = AddressOf Me.OnGetiQuote_PendingQuotationsListOperationCompleted
            End If
            Me.InvokeAsync("GetiQuote_PendingQuotationsList", New Object() {Enviroment, RequestApp, branchCode}, Me.GetiQuote_PendingQuotationsListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetiQuote_PendingQuotationsListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetiQuote_PendingQuotationsListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetiQuote_PendingQuotationsListCompleted(Me, New GetiQuote_PendingQuotationsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/DeleteFile", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFile(ByVal Subject As String, ByVal branchCode As String, ByVal folderArr As String, ByVal Filename As String, ByVal FileId As Integer, ByVal userid As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteFile", New Object() {Subject, branchCode, folderArr, Filename, FileId, userid})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal Subject As String, ByVal branchCode As String, ByVal folderArr As String, ByVal Filename As String, ByVal FileId As Integer, ByVal userid As String)
            Me.DeleteFileAsync(Subject, branchCode, folderArr, Filename, FileId, userid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal Subject As String, ByVal branchCode As String, ByVal folderArr As String, ByVal Filename As String, ByVal FileId As Integer, ByVal userid As String, ByVal userState As Object)
            If (Me.DeleteFileOperationCompleted Is Nothing) Then
                Me.DeleteFileOperationCompleted = AddressOf Me.OnDeleteFileOperationCompleted
            End If
            Me.InvokeAsync("DeleteFile", New Object() {Subject, branchCode, folderArr, Filename, FileId, userid}, Me.DeleteFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFileCompleted(Me, New DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/IsObjectExist", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsObjectExist(ByVal sObject As String, ByVal sSubject As String, ByVal sFileName As String, ByVal BranchCode As String) As Integer
            Dim results() As Object = Me.Invoke("IsObjectExist", New Object() {sObject, sSubject, sFileName, BranchCode})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsObjectExistAsync(ByVal sObject As String, ByVal sSubject As String, ByVal sFileName As String, ByVal BranchCode As String)
            Me.IsObjectExistAsync(sObject, sSubject, sFileName, BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsObjectExistAsync(ByVal sObject As String, ByVal sSubject As String, ByVal sFileName As String, ByVal BranchCode As String, ByVal userState As Object)
            If (Me.IsObjectExistOperationCompleted Is Nothing) Then
                Me.IsObjectExistOperationCompleted = AddressOf Me.OnIsObjectExistOperationCompleted
            End If
            Me.InvokeAsync("IsObjectExist", New Object() {sObject, sSubject, sFileName, BranchCode}, Me.IsObjectExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsObjectExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsObjectExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsObjectExistCompleted(Me, New IsObjectExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Iscar.CloudServices/wsVersion", RequestNamespace:="http://Iscar.CloudServices/", ResponseNamespace:="http://Iscar.CloudServices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function wsVersion(ByVal swebVersion As String) As String
            Dim results() As Object = Me.Invoke("wsVersion", New Object() {swebVersion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wsVersionAsync(ByVal swebVersion As String)
            Me.wsVersionAsync(swebVersion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wsVersionAsync(ByVal swebVersion As String, ByVal userState As Object)
            If (Me.wsVersionOperationCompleted Is Nothing) Then
                Me.wsVersionOperationCompleted = AddressOf Me.OnwsVersionOperationCompleted
            End If
            Me.InvokeAsync("wsVersion", New Object() {swebVersion}, Me.wsVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnwsVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.wsVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wsVersionCompleted(Me, New wsVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://Iscar.CloudServices/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://Iscar.CloudServices/", IsNullable:=false)>  _
    Partial Public Class ValidationSoapHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private devTokenField As String
        
        Private devTokenKeyField As String
        
        Private uniqeIDTokenField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property DevToken() As String
            Get
                Return Me.devTokenField
            End Get
            Set
                Me.devTokenField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DevTokenKey() As String
            Get
                Return Me.devTokenKeyField
            End Get
            Set
                Me.devTokenKeyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UniqeIDToken() As String
            Get
                Return Me.uniqeIDTokenField
            End Get
            Set
                Me.uniqeIDTokenField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub MoveFLD_OBJECTCompletedEventHandler(ByVal sender As Object, ByVal e As MoveFLD_OBJECTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MoveFLD_OBJECTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub Upload_DocumentCompletedEventHandler(ByVal sender As Object, ByVal e As Upload_DocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Upload_DocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub GetListObjectCompletedEventHandler(ByVal sender As Object, ByVal e As GetListObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub Download_DocumentCompletedEventHandler(ByVal sender As Object, ByVal e As Download_DocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Download_DocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub GetiQuote_PendingQuotationsListCompletedEventHandler(ByVal sender As Object, ByVal e As GetiQuote_PendingQuotationsListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetiQuote_PendingQuotationsListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub DeleteFileCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub IsObjectExistCompletedEventHandler(ByVal sender As Object, ByVal e As IsObjectExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsObjectExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")>  _
    Public Delegate Sub wsVersionCompletedEventHandler(ByVal sender As Object, ByVal e As wsVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wsVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
