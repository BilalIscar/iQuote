'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace GetAS400Data
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ChangeLIBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_ODC3_DataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CurrencyConverterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private wsVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFamilyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertAS400QuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SemiApp_bl.My.MySettings.Default.SemiApp_bl_GetAS400Data_Service1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ChangeLIBCompleted As ChangeLIBCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_ODC3_DataCompleted As Get_ODC3_DataCompletedEventHandler
        
        '''<remarks/>
        Public Event CurrencyConverterCompleted As CurrencyConverterCompletedEventHandler
        
        '''<remarks/>
        Public Event wsVersionCompleted As wsVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerDetailsCompleted As GetCustomerDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFamilyNoCompleted As GetFamilyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertAS400QuotationCompleted As InsertAS400QuotationCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeLIB", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeLIB(ByVal BranchCode As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeLIB", New Object() {BranchCode})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeLIBAsync(ByVal BranchCode As String)
            Me.ChangeLIBAsync(BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeLIBAsync(ByVal BranchCode As String, ByVal userState As Object)
            If (Me.ChangeLIBOperationCompleted Is Nothing) Then
                Me.ChangeLIBOperationCompleted = AddressOf Me.OnChangeLIBOperationCompleted
            End If
            Me.InvokeAsync("ChangeLIB", New Object() {BranchCode}, Me.ChangeLIBOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeLIBOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeLIBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeLIBCompleted(Me, New ChangeLIBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_ODC3_Data", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_ODC3_Data(ByVal VendorCode As String, ByVal BranchCode As String, ByVal BranchNum As Integer, ByVal CustNum As Integer, ByVal sCatNo As String, ByVal Quantity As Integer, ByVal sPrice As String) As String
            Dim results() As Object = Me.Invoke("Get_ODC3_Data", New Object() {VendorCode, BranchCode, BranchNum, CustNum, sCatNo, Quantity, sPrice})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_ODC3_DataAsync(ByVal VendorCode As String, ByVal BranchCode As String, ByVal BranchNum As Integer, ByVal CustNum As Integer, ByVal sCatNo As String, ByVal Quantity As Integer, ByVal sPrice As String)
            Me.Get_ODC3_DataAsync(VendorCode, BranchCode, BranchNum, CustNum, sCatNo, Quantity, sPrice, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_ODC3_DataAsync(ByVal VendorCode As String, ByVal BranchCode As String, ByVal BranchNum As Integer, ByVal CustNum As Integer, ByVal sCatNo As String, ByVal Quantity As Integer, ByVal sPrice As String, ByVal userState As Object)
            If (Me.Get_ODC3_DataOperationCompleted Is Nothing) Then
                Me.Get_ODC3_DataOperationCompleted = AddressOf Me.OnGet_ODC3_DataOperationCompleted
            End If
            Me.InvokeAsync("Get_ODC3_Data", New Object() {VendorCode, BranchCode, BranchNum, CustNum, sCatNo, Quantity, sPrice}, Me.Get_ODC3_DataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_ODC3_DataOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_ODC3_DataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_ODC3_DataCompleted(Me, New Get_ODC3_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CurrencyConverter", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CurrencyConverter(ByVal BranchCode As String, ByVal Cur1 As String, ByVal Cur2 As String) As String
            Dim results() As Object = Me.Invoke("CurrencyConverter", New Object() {BranchCode, Cur1, Cur2})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CurrencyConverterAsync(ByVal BranchCode As String, ByVal Cur1 As String, ByVal Cur2 As String)
            Me.CurrencyConverterAsync(BranchCode, Cur1, Cur2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CurrencyConverterAsync(ByVal BranchCode As String, ByVal Cur1 As String, ByVal Cur2 As String, ByVal userState As Object)
            If (Me.CurrencyConverterOperationCompleted Is Nothing) Then
                Me.CurrencyConverterOperationCompleted = AddressOf Me.OnCurrencyConverterOperationCompleted
            End If
            Me.InvokeAsync("CurrencyConverter", New Object() {BranchCode, Cur1, Cur2}, Me.CurrencyConverterOperationCompleted, userState)
        End Sub
        
        Private Sub OnCurrencyConverterOperationCompleted(ByVal arg As Object)
            If (Not (Me.CurrencyConverterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CurrencyConverterCompleted(Me, New CurrencyConverterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/wsVersion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function wsVersion(ByVal BranchCode As String) As String
            Dim results() As Object = Me.Invoke("wsVersion", New Object() {BranchCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub wsVersionAsync(ByVal BranchCode As String)
            Me.wsVersionAsync(BranchCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub wsVersionAsync(ByVal BranchCode As String, ByVal userState As Object)
            If (Me.wsVersionOperationCompleted Is Nothing) Then
                Me.wsVersionOperationCompleted = AddressOf Me.OnwsVersionOperationCompleted
            End If
            Me.InvokeAsync("wsVersion", New Object() {BranchCode}, Me.wsVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnwsVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.wsVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent wsVersionCompleted(Me, New wsVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerDetails(ByVal branchCode As String, ByVal BranchNum As Integer, ByVal CustomerNum As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerDetails", New Object() {branchCode, BranchNum, CustomerNum})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDetailsAsync(ByVal branchCode As String, ByVal BranchNum As Integer, ByVal CustomerNum As Integer)
            Me.GetCustomerDetailsAsync(branchCode, BranchNum, CustomerNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDetailsAsync(ByVal branchCode As String, ByVal BranchNum As Integer, ByVal CustomerNum As Integer, ByVal userState As Object)
            If (Me.GetCustomerDetailsOperationCompleted Is Nothing) Then
                Me.GetCustomerDetailsOperationCompleted = AddressOf Me.OnGetCustomerDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerDetails", New Object() {branchCode, BranchNum, CustomerNum}, Me.GetCustomerDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerDetailsCompleted(Me, New GetCustomerDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFamilyNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFamilyNo(ByVal ItemRefrence As String) As Integer
            Dim results() As Object = Me.Invoke("GetFamilyNo", New Object() {ItemRefrence})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFamilyNoAsync(ByVal ItemRefrence As String)
            Me.GetFamilyNoAsync(ItemRefrence, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFamilyNoAsync(ByVal ItemRefrence As String, ByVal userState As Object)
            If (Me.GetFamilyNoOperationCompleted Is Nothing) Then
                Me.GetFamilyNoOperationCompleted = AddressOf Me.OnGetFamilyNoOperationCompleted
            End If
            Me.InvokeAsync("GetFamilyNo", New Object() {ItemRefrence}, Me.GetFamilyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFamilyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFamilyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFamilyNoCompleted(Me, New GetFamilyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertAS400Quotation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertAS400Quotation( _
                    ByVal branchCode As String,  _
                    ByVal AS400_No As Integer,  _
                    ByVal cusNo As String,  _
                    ByVal cusNa As String,  _
                    ByVal cusCont As String,  _
                    ByVal CurrentDate As String,  _
                    ByVal RateCur As String,  _
                    ByVal quotDate As String,  _
                    ByVal sd As String,  _
                    ByVal cusAd1 As String,  _
                    ByVal cusAd2 As String,  _
                    ByVal AddrC As String,  _
                    ByVal ZIP As String,  _
                    ByVal PAYMENT As String,  _
                    ByVal REAGIN As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal CODE_SALEMAN As String,  _
                    ByVal DIV As String,  _
                    ByVal ToolDesc As String,  _
                    ByVal delv As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertAS400Quotation", New Object() {branchCode, AS400_No, cusNo, cusNa, cusCont, CurrentDate, RateCur, quotDate, sd, cusAd1, cusAd2, AddrC, ZIP, PAYMENT, REAGIN, PHONE, FAX, CODE_SALEMAN, DIV, ToolDesc, delv})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertAS400QuotationAsync( _
                    ByVal branchCode As String,  _
                    ByVal AS400_No As Integer,  _
                    ByVal cusNo As String,  _
                    ByVal cusNa As String,  _
                    ByVal cusCont As String,  _
                    ByVal CurrentDate As String,  _
                    ByVal RateCur As String,  _
                    ByVal quotDate As String,  _
                    ByVal sd As String,  _
                    ByVal cusAd1 As String,  _
                    ByVal cusAd2 As String,  _
                    ByVal AddrC As String,  _
                    ByVal ZIP As String,  _
                    ByVal PAYMENT As String,  _
                    ByVal REAGIN As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal CODE_SALEMAN As String,  _
                    ByVal DIV As String,  _
                    ByVal ToolDesc As String,  _
                    ByVal delv As String)
            Me.InsertAS400QuotationAsync(branchCode, AS400_No, cusNo, cusNa, cusCont, CurrentDate, RateCur, quotDate, sd, cusAd1, cusAd2, AddrC, ZIP, PAYMENT, REAGIN, PHONE, FAX, CODE_SALEMAN, DIV, ToolDesc, delv, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertAS400QuotationAsync( _
                    ByVal branchCode As String,  _
                    ByVal AS400_No As Integer,  _
                    ByVal cusNo As String,  _
                    ByVal cusNa As String,  _
                    ByVal cusCont As String,  _
                    ByVal CurrentDate As String,  _
                    ByVal RateCur As String,  _
                    ByVal quotDate As String,  _
                    ByVal sd As String,  _
                    ByVal cusAd1 As String,  _
                    ByVal cusAd2 As String,  _
                    ByVal AddrC As String,  _
                    ByVal ZIP As String,  _
                    ByVal PAYMENT As String,  _
                    ByVal REAGIN As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal CODE_SALEMAN As String,  _
                    ByVal DIV As String,  _
                    ByVal ToolDesc As String,  _
                    ByVal delv As String,  _
                    ByVal userState As Object)
            If (Me.InsertAS400QuotationOperationCompleted Is Nothing) Then
                Me.InsertAS400QuotationOperationCompleted = AddressOf Me.OnInsertAS400QuotationOperationCompleted
            End If
            Me.InvokeAsync("InsertAS400Quotation", New Object() {branchCode, AS400_No, cusNo, cusNa, cusCont, CurrentDate, RateCur, quotDate, sd, cusAd1, cusAd2, AddrC, ZIP, PAYMENT, REAGIN, PHONE, FAX, CODE_SALEMAN, DIV, ToolDesc, delv}, Me.InsertAS400QuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertAS400QuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertAS400QuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertAS400QuotationCompleted(Me, New InsertAS400QuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ChangeLIBCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeLIBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeLIBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub Get_ODC3_DataCompletedEventHandler(ByVal sender As Object, ByVal e As Get_ODC3_DataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_ODC3_DataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub CurrencyConverterCompletedEventHandler(ByVal sender As Object, ByVal e As CurrencyConverterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CurrencyConverterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub wsVersionCompletedEventHandler(ByVal sender As Object, ByVal e As wsVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class wsVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetCustomerDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetFamilyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetFamilyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFamilyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub InsertAS400QuotationCompletedEventHandler(ByVal sender As Object, ByVal e As InsertAS400QuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertAS400QuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
